<cassert> (assert.h)    //assert 断言
assert.h定义一个可以作为标准调试工具的宏函数:

宏函数
void assert (int expression);
评估断言

1 参数表达式等于0 (即使表达式错误），则将消息写入标准错误设备并且调用abort，终止程序执行。
显示的消息的细节取决于特定的库实现，但它至少应该包括:断言失败的表达式、源文件的名称和发生断言的行号。
通常的表达式格式是:
Assertion failed: expression, file filename, line line number 
断言失败:表达式、文件文件名、行号

2 #define NDEBUG   会使assert(expression)的调用将会失效
因此，这个宏被设计用来捕获编程错误，而不是用户或运行时错误，因为它通常在程序退出调试阶段后被禁用。


例贴子：

/* assert example */
#include <stdio.h>      /* printf */
#include <assert.h>     /* assert */

void print_number(int* myInt) {
  assert (myInt!=NULL);
  printf ("%d\n",*myInt);
}

int main ()
{
  int a=10;
  int * b = NULL;
  int * c = NULL;

  b=&a;

  print_number (b);
  print_number (c);

  return 0;
}


//在本例中，如果使用null指针作为属性调用print_number，则使用assert中止程序执行。这发生在对函数的第二次调用时，这将触发一个断言失败以提示错误。



